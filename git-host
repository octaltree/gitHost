#!/usr/bin/python3

from enum import Enum
import sys
import traceback
import argparse
import urllib.parse
import urllib.request
import urllib.error
import json
#import re
#import logging

USERAGENT = 'gitHost/0.0.1.0' # 何かしら指定しないとhubで怒られる

# main :: IO Int
def main():
    rootp = argparse.ArgumentParser(description='manage git remote host')
    subp = rootp.add_subparsers(description='')
    repop = subp.add_parser('repo', help='manipulate remote repo')
    addp = subp.add_parser('add', help='add hosting service provider & user')
    args = rootp.parse_args()
    #print(args)
    #getBucketUserOwnRepos("octaltree", "dummy")
    return undefined

# :: Str -> Str -> urllib.request.HTTPResponse
def getBucketUserOwnRepos(user, token):
    url = "https://api.bitbucket.org/2.0/repositories/%s" % urllib.parse.quote(user)
    headers = {
            "User-Agent": USERAGENT,
            "Authorization": "Bearer %s" % token}
    req = urllib.request.Request(url, headers=headers)
    try:
        return urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        exctype, excval, exctraceback = sys.exc_info()
        traceback.print_tb(exctraceback)
        print(e.status, e.reason, file=sys.stderr)
        print(e.getheaders(), file=sys.stderr)
        print(e.read(), file=sys.stderr)
        exit(1)

# :: Str -> Str -> urllib.request.HTTPResponse
def getHubUserOwnRepos(user, token):
    url = "https://api.github.com/user/repos"
    headers = {
            "User-Agent": USERAGENT,
            "Authorization": "token %s" % token}
    req = urllib.request.Request(url, headers=headers)
    try:
        return urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        exctype, excval, exctraceback = sys.exc_info()
        traceback.print_tb(exctraceback)
        print(e.status, e.reason, file=sys.stderr)
        print(e.getheaders(), file=sys.stderr)
        print(e.read(), file=sys.stderr)
        exit(1)

# :: Str -> Str -> urllib.request.HTTPResponse
def getLabUserOwnRepos(user, token):
    url = "https://gitlab.com/api/v3/projects"
    headers = {
            "User-Agent": USERAGENT,
            "PRIVATE-TOKEN": "%s" % token}
    req = urllib.request.Request(url, headers=headers)
    try:
        return urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        exctype, excval, exctraceback = sys.exc_info()
        traceback.print_tb(exctraceback)
        print(e.status, e.reason, file=sys.stderr)
        print(e.getheaders(), file=sys.stderr)
        print(e.read(), file=sys.stderr)
        exit(1)

# :: Str -> [(Str, Str)] -> urllib.request.HTTPResponse
def httpGet(url, headers={}, data=None):
    headers.update({'User-Content': "%s" % USERAGENT})
    req = urllib.request.Request(url, b'test', headers=headers, method='GET')
    try:
        return urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        exctype, excval, exctraceback = sys.exc_info()
        traceback.print_tb(exctraceback)
        print(e.status, e.reason, file=sys.stderr)
        print(e.getheaders(), file=sys.stderr)
        print(e.read(), file=sys.stderr)
        exit(1)



# undefined :: a
undefined = None

if __name__ == "__main__" :
  exit(main())

# vim:fenc=utf-8 ff=unix ft=python ts=4 sw=4 sts=4 si et fdm=indent fdl=0 fdn=1:
# vim:cinw=if,elif,else,for,while,try,except,finally,def,class:
